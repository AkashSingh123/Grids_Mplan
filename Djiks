function [path,ExtendNum] = Dijkstra(map_input, start_coordinates, final_coordinates)

cmap = [1 1 1; ...
        0 0 0; ...
        1 0 0; ...
        0 0 1; ...
        0 1 0; ...
        1 1 0; ...
	0 0.95 0];

colormap(cmap);

% variable to control if the map is being visualized on every
% iteration
drawMapEveryTime = true;

[num_rows, num_cols] = size(map_input);

% map - a table that keeps track of the state of each grid cell
map = zeros(num_rows,num_cols);

map(~map_input) = 1;   % Mark free cells
map(map_input)  = 2;   % Mark obstacle cells

% Generate linear indices of start and dest nodes
start_node = sub2ind(size(map), init_coordinates(1), init_coordinates(2));
dest_node  = sub2ind(size(map), final_coordinates(1),  final_coordinates(2));

map(start_node) = 5;
map(dest_node)  = 6;

% Initialize distance array
distanceFromStart = Inf(num_rows,num_cols);

% For each grid cell this array holds the index of its parent
parent = zeros(num_rows,num_cols);

distanceFromStart(start_node) = 0;

% keep track of number of nodes expanded 
ExtendNum = 0;

% Main Loop
while true
    
    % Draw current map
    map(start_node) = 5;
    map(dest_node) = 6;
    
    % make drawMapEveryTime = true if you want to see how the 
    % nodes are expanded on the grid. 
    
    if (drawMapEveryTime)
        image(1.5, 1.5, map);
        grid on;
        axis image;
        
    end
    
    % Find the node with the minimum distance
    [min_dist, current] = min(distanceFromStart(:));
   
    if ((current == dest_node) || isinf(min_dist))
        ExtendNum = ExtendNum-1;
        break
    end
    ExtendNum = ExtendNum+1;
    % Update map
    map(current) = 3;         % mark current node as visited
    distanceFromStart(current) = Inf; % remove this node from further consideration
    
    % Compute row, column coordinates of current node
    [i, j] = ind2sub(size(distanceFromStart), current);
    
   % ********************************************************************* 
    % YOUR CODE BETWEEN THESE LINES OF STARS
    
    % Visit each neighbor of the current node and update the map, distances
    % and parent tables appropriately.
    [p1,p2]=ind2sub(size(map),parent(i,j));
    
    if i+1<=num_rows
        if (map(i+1,j) == 1 || map(i+1,j) == 6) && (i+1~=p1 || j~=p2)
            map(i+1,j) = 4;
            distanceFromStart(i+1,j) = min_dist+1;
            parent(i+1,j) = current;
        end
    end
    if j+1<=num_cols
        if (map(i,j+1) == 1 || map(i,j+1) == 6) && (i~=p1 || j+1~=p2)
            map(i,j+1) = 4;
            distanceFromStart(i,j+1) = min_dist+1;
            parent(i,j+1) = current;
        end
    end
    if i-1>=1
        if (map(i-1,j) == 1 || map(i-1,j) == 6 ) && (i-1~=p1 || j~=p2)
            map(i-1,j) = 4;
            distanceFromStart(i-1,j) = min_dist+1;
            parent(i-1,j) = current;
        end
    end
    if j-1>=1
        if (map(i,j-1) == 1 || map(i,j-1) == 6 ) && (i~=p1 || j-1~=p2)
            map(i,j-1) = 4;
            distanceFromStart(i,j-1) = min_dist+1;
            parent(i,j-1) = current;
        end
    end
    
    %*********************************************************************

end
%% Construct path from start to dest by following the parent links
if (isinf(distanceFromStart(dest_node)))
    path = [];
else
    path = [dest_node];
    
    while (parent(path(1)) ~= 0)
        path = [parent(path(1)), path];
    end
    
        %for making all free cell white again
    %for n = 1:sub2ind(size(map),num_rows,num_cols)
    %    if map(n) == 3 || map(n) == 4
    %        map(n) =  1;
    %    end
    video1 = VideoWriter('dijkstra5');     %creating animation 
    video1.FrameRate = 20;
    open(video1)
    
    % Snippet of code used to visualize the map and the path
    for k = 2:length(path) - 1        
        map(path(k)) = 7;
        pause(0.01);
        image(1.5, 1.5, map);
        grid on;
        axis image;
        frame = getframe(gcf); %get frame
        writeVideo(video1, frame);
    end
    close(video1)
end

end
